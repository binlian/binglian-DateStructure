package com.binglian.BST;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

/**
 * 二分树(递归实现)
 * 
 * e.compareTo(node.e)返回值 。
 * 如果指定的数与参数相等返回0
 * 如果指定的数小于参数返回 -1
 * 如果指定的数大于参数返回 1。
 * @author binglian
 *
 */
public class BST<E extends Comparable<E>> {

	/**
	 * 节点
	 * @author binglian
	 *
	 */
	private class Node{
		public  E e;
		public Node left,right;
		
		public Node(E e){
			this.e=e;
			left=null;
			right=null;
		}
		
		
	}

	private Node root;
	private int size;
	
	public BST(){
		root=null;
		size=0;
	}
	
	public int size(){
		return size;
	}
	
	public boolean isEmpty(){
		return size ==0;
	}
	
	/* 
	//向二分搜索树中添加新的元素e
	public void add(E e){
		
		if(root == null){
			root =new Node(e);
			size++;
		}else
			add(root,e);
	}
	
	
	
	//向以node为根的二分搜索树中输入元素E，递归算法
	private void add(Node node,E e){
		
		if(e.equals(node.e))
			return;
		else if(e.compareTo(node.e) < 0 && node.left==null){
			node.left=new Node(e);
			size++;
			return;
		}
		else if(e.compareTo(node.e) > 0 && node.right == null){
			node.right=new Node(e);
			size++;
			return;
		}
		
		if (e.compareTo(node.e) <0) {
			add(node.left,e);
		}else {//e.compareTo(node.e) > 0
			add(node.right,e);
		}
		
	}
	
	*/
	
	//向二分搜索树中添加新的元素e
	public void add(E e){
		root=add(root, e);
	}
	
	//向以node为根的二分搜索树中插入元素e，递归算法
	//返回插入新节点后二分搜索树的根
	private Node add(Node node,E e){
		if(node == null){
			size++;
			return new Node(e);
		}
		
		if(e.compareTo(node.e) <0)
			node.left=add(node.left, e);
		else if(e.compareTo(node.e) >0)
			node.right=add(node.right, e);
		return node;
	}
	
	//看二分搜索树中是否包含元素e
	public boolean contains(E e){
		return contains(root,e);
	}
	
	//看以node为根的二分搜索树中是否包含元素e，递归算法
	private boolean contains(Node node,E e){
		if(node == null)
			return false;
		
		if(e.compareTo(node.e) == 0)
			return true;
		else if(e.compareTo(node.e) <0)
			return contains(node.left,e);
		else//e.compareTo(node.e)>0
			return contains(node.right,e);
			
	}
	
	
	//二分搜索树的前序遍历
	public void preOrder(){
		preOrder(root);
	}
	
	//前序遍历以node为根的二分搜索树，递归算法
	private void preOrder(Node node){
		
		if(node == null)
			return;
		
		System.out.println(node.e);
		preOrder(node.left);
		preOrder(node.right);
	}
	
	//二分搜索树的非递归前序遍历
	public void preOrderNR(){
		Stack<Node> stack=new Stack<BST<E>.Node>();
		stack.push(root);//把节点进栈
		while(!stack.isEmpty()){//判断不是为空执行
			Node cur=stack.pop();
			System.out.println(cur.e);
			
			if(cur.right !=null)
				stack.push(cur.right);
			if(cur.left !=null)
				stack.push(cur.left);
		}
	}
	
	//二分搜索树的中序遍历
	public void inOrder(){
		inOrder(root);
	}
	
	//中序遍历以node为根的二分搜索树，递归算法
	private void inOrder(Node node){
		if (node == null)
			return;
		
		inOrder(node.left);
		System.out.println(node.e);
		inOrder(node.right);
	}
	
	//二分搜索树的后序遍历
	public void postOrder(){
		postOrder(root);
	}
	
	//后序遍历以node为根的二分搜索树，递归算法
	private void postOrder(Node node){
		
		if(node == null)
			return ;
		postOrder(node.left);
		postOrder(node.right);
		System.out.println(node.e);
	}
	
	//二分搜索树的层序遍历
	public void levelOrder(){
		Queue<Node> queue=new LinkedList<BST<E>.Node>();
		queue.add(root);
		while(!queue.isEmpty()){
			Node cur=queue.remove();
			System.out.println(cur.e);
			
			if(cur.left !=null)
				queue.add(cur.left);
			if(cur.right !=null)
				queue.add(cur.right);
		}
	}
	//寻找二分搜索树的最小元素
	public E minimum(){
		if(size == 0)
			throw new IllegalArgumentException("二分树是空的");
		
		return minimum(root).e;//返回最小二分树的元素
	}
	
	//返回以node为根的二分搜索树的最小值所在节点
	private Node minimum(Node node){
		if(node.left ==null)//因为二分都是左边的最小，如果最左边没有元素，那此元素就是最小
			return node;//返回最小元素
		return minimum(node.left);//如果最左边还有元素，那么继续指向左边，递归下去
	}
	
	//寻找二分搜索树的最大元素
	public E maximum(){
		if(size == 0)
			throw new IllegalArgumentException("二分树是空的");
		
		return maximum(root).e;
	}
	
	//返回以node为根的二分搜索树的最大值所在的节点
	private Node maximum(Node node){
		if(node.right == null)
			return node;
		
		return maximum(node.right);
	}
	
	//从二分搜索树中删除最小值所在节点，返回最小值
	public E removeMin(){
		E ret=minimum();
		root=removeMin(root);
		return ret;
	}
	
	//删除掉以node为根的二分搜索树中的最小节点
	//返回删除节点后新的二分搜索树的根
	private Node removeMin(Node node){
		
		if(node.left ==null){
			Node rightNode=node.right;//如果左边为空，那么删除，那么右边的所有元素往上爬，也形成二分树。没有破坏
			node.right=null;//解除联系
			size--;
			return rightNode;
		}
		
		node.left=removeMin(node.left);//如果不为空，那就是没有找到，继续往下递归下去
		return node;
	}
	
	//从二分搜索树中删除最大值所在节点
	public E removeMax(){
		E ret=maximum();
		root=removeMin(root);
		return ret;
	}
	
	//删除掉以node为根的二分搜索树中的最大节点
	//返回删除节点后新的二分搜索树的根
	private Node removeMax(Node node){
		
		if(node.right ==null){
			Node leftNode=node.left;
			node.left=null;
			size--;
			return leftNode;
		}
		
		node.right=removeMax(node.right);
		return node;
	}
	
	//从二分搜索树中删除元素为e的节点
	public void remove(E e){
		
		root=remove(root,e);
	}
	
	//删除以node为根的二分搜索树中为e的节点，递归算法
	//返回删除节点后新的二分搜索树的根
	private Node remove(Node node,E e){
		
		if(node == null)
			return null;
		
		if(e.compareTo(node.e) <0){
			node.left=remove(node.left, e);
			return node;
		}
		else if(e.compareTo(node.e) >0){
			node.right=remove(node.right, e);
			return node;
		}
		else{
			//e==node.e
			
			if(node.left == null){
				Node rightNode=node.right;
				node.right=null;
				size--;
				return rightNode;
			}
			
			if(node.right ==null){
				Node leftNode=node.left;
				node.left=null;
				size--;
				return leftNode;
			}
			
			//待删除节点左右树均不为空的情况
			//找到比待删除节点大的最小节点，即待删除节点右子树的最小节点
			//用这个节点顶替待删除节点的位置
			Node successor=minimum(node.right);
			successor.right=removeMin(node.right);
			
			successor.left=node.left;
			
			node.left=node.right=null;
			
			return successor;
		}
	}
	
	
	
	
	
	
	@Override
	public String toString(){
		StringBuilder res=new StringBuilder();
		generateBSTString(root,0,res);
		return res.toString(); 
	}
	
	//生成以node为根节点，深度为depth的描述二叉树的字符串
	private void generateBSTString(Node node,int depth,StringBuilder res){
		
		if(node == null){
			res.append(generateDepthString(depth)+"null\n");
			return;
		}
		
		res.append(generateDepthString(depth)+node.e+"\n");
		generateBSTString(node.left, depth+1, res);
		generateBSTString(node.right, depth+1, res);
	}
	
	private String generateDepthString(int depth){
		
		StringBuilder res=new StringBuilder();
		for(int i=0;i<depth;i++)
			res.append("--");
		return res.toString();
	}
}
